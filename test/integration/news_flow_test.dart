/// üß™ Integration Test - News Flow
/// 
/// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö flow ‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:BIBOL/main.dart' as app;
import 'package:BIBOL/services/cache/cache_service.dart';
import 'package:BIBOL/widgets/home_widgets/news_card_widget.dart';

void main() {
  group('News Flow Integration Tests', () {
    setUp(() async {
      await CacheService.initialize();
    });

    testWidgets('Browse news from home page', (WidgetTester tester) async {
      // üéØ Test: ‡∏î‡∏π‡∏Ç‡πà‡∏≤‡∏ß‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤ home

      app.main();
      await tester.pumpAndSettle(const Duration(seconds: 5));

      // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏´‡∏•‡∏î
      await tester.pump(const Duration(seconds: 2));
      await tester.pumpAndSettle();

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤ NewsCardWidget
      final newsCards = find.byType(NewsCardWidget);

      if (newsCards.evaluate().isNotEmpty) {
        // ‡∏°‡∏µ‡∏Ç‡πà‡∏≤‡∏ß - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏î‡∏î‡∏π
        await tester.tap(newsCards.first);
        await tester.pumpAndSettle();

        // ‡∏Ñ‡∏ß‡∏£‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡πà‡∏≤‡∏ß
        // (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà crash)
      }

      // Test passed
      expect(find.byType(MaterialApp), findsOneWidget);
    });

    testWidgets('Navigate to News page', (WidgetTester tester) async {
      // üéØ Test: ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ News

      app.main();
      await tester.pumpAndSettle(const Duration(seconds: 3));

      // ‡∏´‡∏≤ bottom nav
      final bottomNav = find.byType(BottomNavigationBar);
      if (bottomNav.evaluate().isEmpty) return;

      // ‡∏Å‡∏î tab ‡∏Ç‡πà‡∏≤‡∏ß (‡∏õ‡∏Å‡∏ï‡∏¥‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô tab ‡∏ó‡∏µ‡πà 1)
      final navItems = find.descendant(
        of: bottomNav,
        matching: find.byType(InkResponse),
      );

      if (navItems.evaluate().length > 1) {
        await tester.tap(navItems.at(1));
        await tester.pumpAndSettle();

        // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πà‡∏≤‡∏ß
        await tester.pump(const Duration(seconds: 2));
        await tester.pumpAndSettle();
      }

      expect(find.byType(MaterialApp), findsOneWidget);
    });

    testWidgets('Search news', (WidgetTester tester) async {
      // üéØ Test: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πà‡∏≤‡∏ß

      app.main();
      await tester.pumpAndSettle(const Duration(seconds: 3));

      // ‡∏´‡∏≤ TextField ‡∏Ç‡∏≠‡∏á search
      final searchFields = find.byType(TextField);

      if (searchFields.evaluate().isNotEmpty) {
        // ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
        await tester.enterText(searchFields.first, '‡∏Ç‡πà‡∏≤‡∏ß');
        await tester.pump();

        // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
        await tester.pump(const Duration(milliseconds: 500));
        await tester.pumpAndSettle();
      }

      expect(find.byType(MaterialApp), findsOneWidget);
    });

    testWidgets('Pull to refresh news', (WidgetTester tester) async {
      // üéØ Test: Pull to refresh

      app.main();
      await tester.pumpAndSettle(const Duration(seconds: 3));

      // ‡∏´‡∏≤ RefreshIndicator ‡∏´‡∏£‡∏∑‡∏≠ CustomScrollView
      final scrollView = find.byType(CustomScrollView);

      if (scrollView.evaluate().isNotEmpty) {
        // ‡∏î‡∏∂‡∏á‡∏•‡∏á‡∏°‡∏≤ (pull to refresh)
        await tester.drag(scrollView.first, const Offset(0, 300));
        await tester.pump();

        // ‡∏£‡∏≠‡πÉ‡∏´‡πâ refresh
        await tester.pump(const Duration(seconds: 2));
        await tester.pumpAndSettle();
      }

      expect(find.byType(MaterialApp), findsOneWidget);
    });
  });

  group('News Cache Tests', () {
    testWidgets('Display cached news when offline', (tester) async {
      // üéØ Test: ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏à‡∏≤‡∏Å cache ‡πÄ‡∏°‡∏∑‡πà‡∏≠ offline

      // Cache ‡∏Ç‡πà‡∏≤‡∏ß‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô
      await CacheService.cacheNews([
        {
          'id': '1',
          'title': 'Test News',
          'details': 'Test Details',
          'photo_file': '',
          'visits': 100,
        },
      ]);

      app.main();
      await tester.pumpAndSettle(const Duration(seconds: 3));

      // ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏´‡πá‡∏ô‡∏Ç‡πà‡∏≤‡∏ß‡∏à‡∏≤‡∏Å cache
      // (‡πÅ‡∏°‡πâ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ internet)
      
      expect(find.byType(MaterialApp), findsOneWidget);
    });
  });
}
