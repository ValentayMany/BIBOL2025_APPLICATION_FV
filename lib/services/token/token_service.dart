import 'dart:convert';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:flutter/foundation.dart';

class TokenService {
  static const String _tokenKey = 'auth_token';
  static const String _userInfoKey = 'user_info';
  static const String _studentIdKey = 'student_id';

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Token ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Student
  static Future<void> saveToken(String token) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setString(_tokenKey, token);
      debugPrint('‚úÖ Token saved successfully');
    } catch (e) {
      debugPrint('‚ùå Error saving token: $e');
    }
  }

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Student (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Student Model)
  static Future<void> saveUserInfo(Map<String, dynamic> userInfo) async {
    try {
      final prefs = await SharedPreferences.getInstance();

      // ‡πÅ‡∏õ‡∏•‡∏á Student Model ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà HomePage/ProfilePage ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
      Map<String, dynamic> normalizedUserInfo = {
        'id': userInfo['id'],
        'student_id':
            userInfo['admission_no'] ??
            userInfo['roll_no'], // ‡πÉ‡∏ä‡πâ admission_no ‡πÄ‡∏õ‡πá‡∏ô student_id
        'first_name': userInfo['firstname'] ?? '',
        'last_name': userInfo['lastname'] ?? '',
        'phone': userInfo['mobileno'] ?? '',
        'email': userInfo['email'] ?? '',
        'class': userInfo['class'] ?? 'N/A',
        'gender': userInfo['gender'] ?? '',
        'image': userInfo['image'],
        // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
        'middlename': userInfo['middlename'] ?? '',
        'admission_no': userInfo['admission_no'] ?? '',
        'roll_no': userInfo['roll_no'] ?? '',
        'admission_date': userInfo['admission_date'],
        'dob': userInfo['dob'],
        'religion': userInfo['religion'],
        'is_active': userInfo['is_active'] ?? 'yes',
      };

      await prefs.setString(_userInfoKey, jsonEncode(normalizedUserInfo));

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å student ID ‡πÅ‡∏¢‡∏Å‡πÑ‡∏ß‡πâ‡∏î‡πâ‡∏ß‡∏¢
      if (userInfo['id'] != null) {
        await prefs.setInt(_studentIdKey, userInfo['id']);
      }

      debugPrint('‚úÖ User info saved successfully');
      debugPrint(
        'üë§ Student: ${normalizedUserInfo['first_name']} ${normalizedUserInfo['last_name']}',
      );
      debugPrint('üé´ Student ID: ${normalizedUserInfo['student_id']}');
    } catch (e) {
      debugPrint('‚ùå Error saving user info: $e');
    }
  }

  // ‡∏î‡∏∂‡∏á Token
  static Future<String?> getToken() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      return prefs.getString(_tokenKey);
    } catch (e) {
      debugPrint('‚ùå Error getting token: $e');
      return null;
    }
  }

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• User
  static Future<Map<String, dynamic>?> getUserInfo() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final userInfoString = prefs.getString(_userInfoKey);

      if (userInfoString != null && userInfoString.isNotEmpty) {
        final userInfo = jsonDecode(userInfoString) as Map<String, dynamic>;
        debugPrint(
          '‚úÖ User info retrieved: ${userInfo['first_name']} ${userInfo['last_name']}',
        );
        return userInfo;
      }

      debugPrint('‚ö†Ô∏è No user info found');
      return null;
    } catch (e) {
      debugPrint('‚ùå Error getting user info: $e');
      return null;
    }
  }

  // ‡∏î‡∏∂‡∏á Student ID
  static Future<int?> getStudentId() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      return prefs.getInt(_studentIdKey);
    } catch (e) {
      debugPrint('‚ùå Error getting student ID: $e');
      return null;
    }
  }

  // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ Login ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
  static Future<bool> isLoggedIn() async {
    try {
      final token = await getToken();
      final userInfo = await getUserInfo();

      final isLogged =
          token != null &&
          token.isNotEmpty &&
          userInfo != null &&
          userInfo['id'] != null;

      debugPrint('üîç Login status: $isLogged');
      return isLogged;
    } catch (e) {
      debugPrint('‚ùå Error checking login status: $e');
      return false;
    }
  }

  // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Logout)
  static Future<void> clearAll() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.remove(_tokenKey);
      await prefs.remove(_userInfoKey);
      await prefs.remove(_studentIdKey);
      debugPrint('‚úÖ All auth data cleared (Logged out)');
    } catch (e) {
      debugPrint('‚ùå Error clearing auth data: $e');
    }
  }

  // ‡∏•‡πâ‡∏≤‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Token
  static Future<void> clearToken() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.remove(_tokenKey);
      debugPrint('‚úÖ Token cleared');
    } catch (e) {
      debugPrint('‚ùå Error clearing token: $e');
    }
  }

  // ‡∏•‡πâ‡∏≤‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• User
  static Future<void> clearUserInfo() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.remove(_userInfoKey);
      await prefs.remove(_studentIdKey);
      debugPrint('‚úÖ User info cleared');
    } catch (e) {
      debugPrint('‚ùå Error clearing user info: $e');
    }
  }

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• User
  static Future<void> updateUserInfo(Map<String, dynamic> updates) async {
    try {
      final currentInfo = await getUserInfo();
      if (currentInfo != null) {
        currentInfo.addAll(updates);
        await saveUserInfo(currentInfo);
        debugPrint('‚úÖ User info updated');
      }
    } catch (e) {
      debugPrint('‚ùå Error updating user info: $e');
    }
  }
}
