import 'dart:convert';
import 'dart:io';
import 'package:BIBOL/config/bibol_api.dart';
import 'package:BIBOL/models/news/news_response.dart' show NewsResponse;
import 'package:BIBOL/models/topic/topic_model.dart' show Topic;
import 'package:BIBOL/models/website/website_info_model.dart'
    show WebsiteInfoModel;
import 'package:http/http.dart' as http;

/// üì∞ NewsService - Service ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
/// 
/// Service ‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£‡∏à‡∏≤‡∏Å API ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡πà‡∏≤‡∏ß
/// 
/// **‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å:**
/// - ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡πà‡∏≤‡∏ß‡∏û‡∏£‡πâ‡∏≠‡∏° pagination
/// - ‡∏î‡∏∂‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏ï‡∏≤‡∏° ID
/// - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå
/// - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö retry mechanism ‡πÄ‡∏°‡∏∑‡πà‡∏≠ request ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
/// - Timeout protection (30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
/// 
/// **‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:**
/// ```dart
/// // ‡∏î‡∏∂‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å 10 ‡∏Ç‡πà‡∏≤‡∏ß
/// final newsResponse = await NewsService.getNews(limit: 10, page: 1);
/// 
/// // ‡∏î‡∏∂‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏ï‡∏≤‡∏° ID
/// final news = await NewsService.getNewsById('123');
/// 
/// // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå
/// final website = await NewsService.getWebsiteInfo();
/// ```
class NewsService {
  static const Duration _defaultTimeout = Duration(seconds: 30);
  static const int _maxRetries = 3;

  static Future<NewsResponse> getNews({
    int? limit,
    int? page,
    String? category,
  }) async {
    int retries = 0;

    while (retries < _maxRetries) {
      try {
        // ‚úÖ ‡πÉ‡∏ä‡πâ NewsApiConfig ‡πÅ‡∏ó‡∏ô ApiConfig
        final url = NewsApiConfig.getNewsUrl(
          page: page ?? 1,
          count: limit ?? 10,
        );
        print('üîç Fetching news from: $url (attempt ${retries + 1})');

        final response = await http
            .get(Uri.parse(url), headers: _getHeaders())
            .timeout(_defaultTimeout);

        print('üì° News API Response Status: ${response.statusCode}');
        _logResponse(response);

        if (response.statusCode == 200) {
          final jsonData = json.decode(response.body);
          return NewsResponse.fromJson(jsonData);
        } else if (response.statusCode >= 500 && retries < _maxRetries - 1) {
          retries++;
          await Future.delayed(Duration(seconds: retries * 2));
          continue;
        } else {
          throw HttpException(
            'HTTP ${response.statusCode}: ${response.reasonPhrase}',
          );
        }
      } catch (e) {
        print('‚ùå Error fetching news (attempt ${retries + 1}): $e');

        if (retries == _maxRetries - 1) {
          return NewsResponse(
            success: false,
            message: _getErrorMessage(e),
            data: [],
          );
        }

        retries++;
        await Future.delayed(Duration(seconds: retries));
      }
    }

    return NewsResponse(
      success: false,
      message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πà‡∏≤‡∏ß‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° $_maxRetries ‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
      data: [],
    );
  }

  // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç getNewsById ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö API structure ‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á
  static Future<Topic?> getNewsById(String id) async {
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ID ‡∏Å‡πà‡∏≠‡∏ô
      if (id.isEmpty) {
        print('‚ùå News ID is empty');
        return null;
      }

      final numericId = int.tryParse(id);
      if (numericId == null) {
        print('‚ùå Invalid news ID format: $id');
        return null;
      }

      // ‚úÖ ‡πÉ‡∏ä‡πâ list API ‡πÅ‡∏•‡πâ‡∏ß filter ‡∏´‡∏≤ ID ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
      final url = NewsApiConfig.getNewsByIdUrl(id);
      print('üîç Fetching news from list API: $url');

      final response = await http
          .get(Uri.parse(url), headers: _getHeaders())
          .timeout(_defaultTimeout);

      print('üì° News API Response Status: ${response.statusCode}');

      if (response.statusCode == 200) {
        try {
          final jsonData = json.decode(response.body);
          print(
            'üìä JSON Structure keys: ${jsonData is Map ? jsonData.keys.toList() : 'Not a Map'}',
          );

          // ‚úÖ Parse topics list ‡πÅ‡∏•‡∏∞‡∏´‡∏≤ topic ‡∏ó‡∏µ‡πà‡∏°‡∏µ ID ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
          if (jsonData is Map &&
              jsonData['topics'] != null &&
              jsonData['topics'] is List) {
            final topics = jsonData['topics'] as List;
            print(
              'üìù Found ${topics.length} topics, searching for ID: $numericId',
            );

            for (var topicData in topics) {
              if (topicData is Map && topicData['id'] == numericId) {
                print('‚úÖ Found matching topic: ${topicData['title']}');
                return Topic.fromJson(topicData as Map<String, dynamic>);
              }
            }

            print(
              '‚ùå Topic with ID $numericId not found in ${topics.length} topics',
            );
            // ‡πÅ‡∏™‡∏î‡∏á IDs ‡∏ó‡∏µ‡πà‡∏°‡∏µ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debug
            final availableIds =
                topics
                    .where((t) => t is Map && t['id'] != null)
                    .map((t) => t['id'])
                    .toList();
            print('üìã Available IDs: $availableIds');
            return null;
          } else {
            print('‚ùå No topics array found in response');
            return null;
          }
        } catch (parseError) {
          print('‚ùå JSON parsing error: $parseError');
          print('üìÑ Raw response: ${response.body.substring(0, 500)}...');
          return null;
        }
      } else {
        print('‚ùå HTTP Error ${response.statusCode}: ${response.reasonPhrase}');
        return null;
      }
    } catch (e) {
      print('‚ùå Network/Connection error in getNewsById: $e');
      return null;
    }
  }

  // ‚úÖ Helper method ‡πÄ‡∏û‡∏∑‡πà‡∏≠ parse Topic ‡∏à‡∏≤‡∏Å response ‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ
  static Topic? _parseTopicFromResponse(dynamic jsonData) {
    try {
      // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà 1: response ‡πÄ‡∏õ‡πá‡∏ô topic object ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
      if (jsonData is Map<String, dynamic> && jsonData.containsKey('id')) {
        print('üìù Parsing as direct topic object');
        return Topic.fromJson(jsonData);
      }

      // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà 2: response ‡∏°‡∏µ key 'data' ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≤‡∏á‡πÉ‡∏ô‡πÄ‡∏õ‡πá‡∏ô topic
      if (jsonData is Map && jsonData['data'] != null) {
        print('üìù Parsing from data field');
        if (jsonData['data'] is Map<String, dynamic>) {
          return Topic.fromJson(jsonData['data']);
        } else if (jsonData['data'] is List && jsonData['data'].isNotEmpty) {
          return Topic.fromJson(jsonData['data'][0]);
        }
      }

      // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà 3: response ‡∏°‡∏µ key 'topics' array
      if (jsonData is Map &&
          jsonData['topics'] != null &&
          jsonData['topics'] is List) {
        print('üìù Parsing from topics array');
        final topics = jsonData['topics'] as List;
        if (topics.isNotEmpty) {
          return Topic.fromJson(topics[0]);
        }
      }

      // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà 4: response ‡πÄ‡∏õ‡πá‡∏ô array ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
      if (jsonData is List && jsonData.isNotEmpty) {
        print('üìù Parsing from direct array');
        return Topic.fromJson(jsonData[0]);
      }

      // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà 5: response ‡∏°‡∏µ key 'topic' (singular)
      if (jsonData is Map && jsonData['topic'] != null) {
        print('üìù Parsing from topic field');
        return Topic.fromJson(jsonData['topic']);
      }

      // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà 6: response ‡∏°‡∏µ key 'result'
      if (jsonData is Map && jsonData['result'] != null) {
        print('üìù Parsing from result field');
        if (jsonData['result'] is Map<String, dynamic>) {
          return Topic.fromJson(jsonData['result']);
        }
      }

      print('‚ùå No recognized topic structure found in response');
      return null;
    } catch (e) {
      print('‚ùå Error in _parseTopicFromResponse: $e');
      return null;
    }
  }

  static Future<NewsResponse> searchNews(
    String keyword, {
    int? limit,
    int? page,
  }) async {
    try {
      if (keyword.trim().isEmpty) {
        return NewsResponse(
          success: false,
          message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤',
          data: [],
        );
      }

      // ‡πÉ‡∏ä‡πâ getNewsUrl ‡πÅ‡∏ó‡∏ô newsSearchUrl
      final url = NewsApiConfig.getNewsUrl(
        page: page ?? 1,
        count: limit ?? 50,
        search: keyword.trim(),
      );

      print('üîç Searching news with URL: $url');

      final response = await http
          .get(Uri.parse(url), headers: _getHeaders())
          .timeout(_defaultTimeout);

      print('üì° Search API Response Status: ${response.statusCode}');
      _logResponse(response);

      if (response.statusCode == 200) {
        final jsonData = json.decode(response.body);
        return NewsResponse.fromJson(jsonData);
      } else {
        throw HttpException('Search failed: ${response.statusCode}');
      }
    } catch (e) {
      print('‚ùå Error searching news: $e');
      return NewsResponse(
        success: false,
        message: _getErrorMessage(e),
        data: [],
      );
    }
  }

  static Future<WebsiteInfoModel?> getWebsiteInfo() async {
    try {
      final url = NewsApiConfig.websiteInfoUrl;
      print('üîç Fetching website info from: $url');

      final response = await http
          .get(Uri.parse(url), headers: _getHeaders())
          .timeout(_defaultTimeout);

      print('üì° Website Info API Response Status: ${response.statusCode}');
      _logResponse(response);

      if (response.statusCode == 200) {
        final jsonData = json.decode(response.body);

        if (jsonData['details'] != null) {
          return WebsiteInfoModel.fromJson(jsonData['details']);
        } else if (jsonData['data'] != null) {
          return WebsiteInfoModel.fromJson(jsonData['data']);
        } else if (jsonData is Map<String, dynamic> &&
            jsonData.containsKey('site_url')) {
          return WebsiteInfoModel.fromJson(jsonData);
        }
      }
      return null;
    } catch (e) {
      print('‚ùå Error fetching website info: $e');
      return null;
    }
  }

  // Helper methods
  static Map<String, String> _getHeaders() {
    return {
      'Content-Type': 'application/json',
      'Accept': 'application/json',
      'User-Agent': 'Flutter App/1.0',
    };
  }

  static void _logResponse(http.Response response) {
    if (response.body.length > 500) {
      print('üìÑ Response Body: ${response.body.substring(0, 500)}...');
    } else {
      print('üìÑ Response Body: ${response.body}');
    }
  }

  static String _getErrorMessage(dynamic error) {
    if (error is SocketException) {
      return '‡∫ö‡ªç‡ªà‡∫™‡∫≤‡∫°‡∫≤‡∫î‡ªÄ‡∫ä‡∫∑‡ªà‡∫≠‡∫°‡∫ï‡ªç‡ªà‡∫≠‡∫¥‡∫ô‡ªÄ‡∫ï‡∫µ‡ªÄ‡∫ô‡∫±‡∫î‡ªÑ‡∫î‡ªâ';
    } else if (error is HttpException) {
      return '‡ªÄ‡∫ä‡∫µ‡∫ö‡ªÄ‡∫ß‡∫µ‡∫ö‡ªç‡ªà‡∫™‡∫≤‡∫°‡∫≤‡∫î‡∫ï‡∫≠‡∫ö‡∫™‡∫∞‡ªú‡∫≠‡∫á‡ªÑ‡∫î‡ªâ';
    } else if (error is FormatException) {
      return '‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫ó‡∫µ‡ªà‡ªÑ‡∫î‡ªâ‡∫Æ‡∫±‡∫ö‡∫ö‡ªç‡ªà‡∫ñ‡∫∑‡∫Å‡∫ï‡ªâ‡∫≠‡∫á';
    } else if (error.toString().contains('TimeoutException')) {
      return '‡ªù‡∫ª‡∫î‡ªÄ‡∫ß‡∫•‡∫≤‡ªÉ‡∫ô‡∫Å‡∫≤‡∫ô‡ªÄ‡∫ä‡∫∑‡ªà‡∫≠‡∫°‡∫ï‡ªç‡ªà';
    }
    return '‡ªÄ‡∫Å‡∫µ‡∫î‡∫Ç‡ªç‡ªâ‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î‡∫ó‡∫µ‡ªà‡∫ö‡ªç‡ªà‡∫Ñ‡∫≤‡∫î‡∫Ñ‡∫¥‡∫î: ${error.toString()}';
  }

  // Other methods
  static Future<bool> testConnection() async {
    try {
      final url = NewsApiConfig.getNewsUrl(count: 1);
      final response = await http
          .get(Uri.parse(url), headers: _getHeaders())
          .timeout(const Duration(seconds: 10));

      print('üì° Connection test result: ${response.statusCode}');
      return response.statusCode == 200;
    } catch (e) {
      print('‚ùå News API connection error: $e');
      return false;
    }
  }

  static Future<NewsResponse> getNewsByCategory(
    String category, {
    int? limit,
    int? page,
  }) async {
    return getNews(category: category, limit: limit, page: page);
  }

  static Future<NewsResponse> getNewsWithPagination({
    required int page,
    int limit = 10,
    String? category,
  }) async {
    return getNews(page: page, limit: limit, category: category);
  }

  static Future<NewsResponse> refreshNews() async {
    print('üîÑ Refreshing news...');
    return getNews(limit: 20, page: 1);
  }

  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debug API response
  static Future<void> debugNewsApi(String id) async {
    print('üêõ DEBUG: Testing news API with ID: $id');
    try {
      final url = NewsApiConfig.getNewsByIdUrl(id);
      print('üêõ DEBUG URL: $url');

      final response = await http.get(Uri.parse(url), headers: _getHeaders());

      print('üêõ DEBUG Status: ${response.statusCode}');
      print('üêõ DEBUG Headers: ${response.headers}');
      print('üêõ DEBUG Body Length: ${response.body.length}');
      print('üêõ DEBUG Body: ${response.body}');
    } catch (e) {
      print('üêõ DEBUG Error: $e');
    }
  }
}
