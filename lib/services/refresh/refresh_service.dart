import 'dart:async';
import 'package:BIBOL/services/error/error_handler_service.dart';
import 'package:BIBOL/services/news/news_service.dart';
import 'package:BIBOL/services/course/course_Service.dart';
import 'package:BIBOL/services/website/contact_service.dart';

/// üîÑ Refresh Service
/// 
/// Centralized refresh service for BIBOL App
/// - News refresh
/// - Courses refresh
/// - Contacts refresh
/// - Error handling
/// - Progress tracking
class RefreshService {
  static RefreshService? _instance;
  static RefreshService get instance => _instance ??= RefreshService._();
  
  RefreshService._();

  // Refresh state tracking
  bool _isRefreshing = false;
  String? _currentRefreshType;
  DateTime? _lastRefreshTime;
  
  // Controllers
  StreamController<bool>? _refreshController;
  StreamController<String>? _refreshStatusController;
  StreamController<Map<String, dynamic>>? _refreshProgressController;

  // Getters
  Stream<bool>? get refreshStream => _refreshController?.stream;
  Stream<String>? get refreshStatusStream => _refreshStatusController?.stream;
  Stream<Map<String, dynamic>>? get refreshProgressStream => _refreshProgressController?.stream;
  bool get isRefreshing => _isRefreshing;
  String? get currentRefreshType => _currentRefreshType;
  DateTime? get lastRefreshTime => _lastRefreshTime;

  /// üöÄ Initialize refresh service
  void initialize() {
    _refreshController ??= StreamController<bool>.broadcast();
    _refreshStatusController ??= StreamController<String>.broadcast();
    _refreshProgressController ??= StreamController<Map<String, dynamic>>.broadcast();
    
    print('üîÑ Refresh Service initialized');
  }

  /// üì∞ Refresh news
  Future<void> refreshNews() async {
    await _performRefresh(
      'news',
      () => _refreshNewsData(),
      '‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£',
    );
  }

  /// üìò Refresh courses
  Future<void> refreshCourses() async {
    await _performRefresh(
      'courses',
      () => _refreshCoursesData(),
      '‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô',
    );
  }

  /// üìû Refresh contacts
  Future<void> refreshContacts() async {
    await _performRefresh(
      'contacts',
      () => _refreshContactsData(),
      '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠',
    );
  }

  /// üîÑ Refresh all data
  Future<void> refreshAll() async {
    await _performRefresh(
      'all',
      () => _refreshAllData(),
      '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
    );
  }

  /// üéØ Perform refresh with error handling
  Future<void> _performRefresh(
    String type,
    Future<void> Function() refreshFunction,
    String displayName,
  ) async {
    if (_isRefreshing) {
      print('‚ö†Ô∏è Refresh already in progress, skipping $type');
      return;
    }

    try {
      _setRefreshing(true, type);
      _updateStatus('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï$displayName...');
      _updateProgress(0, '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï');

      await ErrorHandlerService.executeWithRetry(
        refreshFunction,
        operationName: 'Refresh $displayName',
        maxRetries: 2,
        retryDelay: const Duration(seconds: 1),
      );

      _updateProgress(100, '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï$displayName‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
      _updateStatus('‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï$displayName‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
      _lastRefreshTime = DateTime.now();

      print('‚úÖ Refresh $type completed successfully');
    } on AppError catch (error) {
      _updateStatus('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï$displayName');
      print('‚ùå Refresh $type failed: ${error.message}');
      rethrow;
    } catch (e) {
      _updateStatus('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î');
      print('‚ùå Unexpected error during refresh $type: $e');
      rethrow;
    } finally {
      _setRefreshing(false, null);
    }
  }

  /// üì∞ Refresh news data
  Future<void> _refreshNewsData() async {
    _updateProgress(20, '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£...');
    
    // Simulate news refresh
    await Future.delayed(const Duration(milliseconds: 500));
    
    _updateProgress(60, '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£...');
    
    // Simulate processing
    await Future.delayed(const Duration(milliseconds: 300));
    
    _updateProgress(80, '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...');
    
    // Simulate final update
    await Future.delayed(const Duration(milliseconds: 200));
  }

  /// üìò Refresh courses data
  Future<void> _refreshCoursesData() async {
    _updateProgress(20, '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô...');
    
    // Simulate courses refresh
    await Future.delayed(const Duration(milliseconds: 400));
    
    _updateProgress(60, '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô...');
    
    // Simulate processing
    await Future.delayed(const Duration(milliseconds: 300));
    
    _updateProgress(80, '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...');
    
    // Simulate final update
    await Future.delayed(const Duration(milliseconds: 300));
  }

  /// üìû Refresh contacts data
  Future<void> _refreshContactsData() async {
    _updateProgress(20, '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠...');
    
    // Simulate contacts refresh
    await Future.delayed(const Duration(milliseconds: 300));
    
    _updateProgress(60, '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠...');
    
    // Simulate processing
    await Future.delayed(const Duration(milliseconds: 200));
    
    _updateProgress(80, '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...');
    
    // Simulate final update
    await Future.delayed(const Duration(milliseconds: 200));
  }

  /// üîÑ Refresh all data
  Future<void> _refreshAllData() async {
    _updateProgress(10, '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î...');
    
    // Refresh news
    _updateProgress(25, '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£...');
    await _refreshNewsData();
    
    // Refresh courses
    _updateProgress(50, '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô...');
    await _refreshCoursesData();
    
    // Refresh contacts
    _updateProgress(75, '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠...');
    await _refreshContactsData();
    
    _updateProgress(100, '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
  }

  /// üîÑ Set refreshing state
  void _setRefreshing(bool isRefreshing, String? type) {
    _isRefreshing = isRefreshing;
    _currentRefreshType = type;
    _refreshController?.add(isRefreshing);
  }

  /// üìä Update refresh status
  void _updateStatus(String status) {
    _refreshStatusController?.add(status);
  }

  /// üìà Update refresh progress
  void _updateProgress(int progress, String message) {
    _refreshProgressController?.add({
      'progress': progress,
      'message': message,
      'timestamp': DateTime.now(),
    });
  }

  /// üìä Get refresh statistics
  Map<String, dynamic> getRefreshStats() {
    return {
      'isRefreshing': _isRefreshing,
      'currentType': _currentRefreshType,
      'lastRefreshTime': _lastRefreshTime,
      'timeSinceLastRefresh': _lastRefreshTime != null 
          ? DateTime.now().difference(_lastRefreshTime!).inSeconds 
          : null,
    };
  }

  /// üîÑ Force refresh (bypass cache)
  Future<void> forceRefresh(String type) async {
    switch (type) {
      case 'news':
        await refreshNews();
        break;
      case 'courses':
        await refreshCourses();
        break;
      case 'contacts':
        await refreshContacts();
        break;
      case 'all':
        await refreshAll();
        break;
      default:
        throw ArgumentError('Invalid refresh type: $type');
    }
  }

  /// ‚è∞ Check if refresh is needed
  bool shouldRefresh({Duration? threshold}) {
    if (_lastRefreshTime == null) return true;
    
    final thresholdDuration = threshold ?? const Duration(minutes: 5);
    return DateTime.now().difference(_lastRefreshTime!) > thresholdDuration;
  }

  /// üßπ Cleanup resources
  void dispose() {
    _refreshController?.close();
    _refreshStatusController?.close();
    _refreshProgressController?.close();
  }
}
